package typesense

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ resource.Resource              = &clusterResource{}
	_ resource.ResourceWithConfigure = &clusterResource{}

	clusterApiKeysResourceSchema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "Autogenerated ID assigned by the Typesense engine.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"cluster_id": schema.StringAttribute{
				Description: "The cluster id.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"admin_key": schema.StringAttribute{
				Description: "Generated Admin key. Actions [*], Collections [*]",
				Computed:    true,
				Sensitive:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"search_only_key": schema.StringAttribute{
				Description: "Generated Search Only key. Actions [documents:search], Collections [*]",
				Computed:    true,
				Sensitive:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
)

// NewClusterApiKeysResource is a helper function to simplify the provider implementation.
func NewClusterApiKeysResource() resource.Resource {
	return &clusterApiKeysResource{}
}

// clusterApiKeysResource is the resource implementation.
type clusterApiKeysResource struct {
	client *typesenseClient
}

// Configure adds the provider configured client to the resource.
func (cr *clusterApiKeysResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	cr.client = req.ProviderData.(*typesenseClient)
}

// Metadata returns the resource type name.
func (cr *clusterApiKeysResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_cluster_api_keys"
}

// Schema defines the schema for the resource.
func (cr *clusterApiKeysResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = clusterApiKeysResourceSchema
}

// Create creates the resource and sets the initial Terraform state.
func (cr *clusterApiKeysResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	// Retrieve values from plan
	var plan typesenseClusterApiKeysModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Create new cluster
	clusterApiKeys, err := cr.client.CreateClusterApiKeys(typesenseClusterApiKeys{
		Id:            plan.ID.ValueString(),
		ClusterId:     plan.ClusterId.ValueString(),
		AdminKey:      plan.AdminKey.ValueString(),
		SearchOnlyKey: plan.SearchOnlyKey.ValueString(),
	})
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating cluster api keys",
			"Could not create cluster api keys, unexpected error: "+err.Error(),
		)
		return
	}

	plan.ID = types.StringValue(clusterApiKeys.Id)
	plan.ClusterId = types.StringValue(clusterApiKeys.ClusterId)
	plan.AdminKey = types.StringValue(clusterApiKeys.AdminKey)
	plan.SearchOnlyKey = types.StringValue(clusterApiKeys.SearchOnlyKey)

	// Set state to fully populated data
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read refreshes the Terraform state with the latest data.
func (cr *clusterApiKeysResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// There is no way to obtain the API Keys after creation.
}

// Update updates the resource and sets the updated Terraform state on success.
func (cr *clusterApiKeysResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// There is no way to update the API Keys after creation.
}

// Delete deletes the resource and removes the Terraform state on success.
func (cr *clusterApiKeysResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// The created API Keys don't return the key IDs, so we can't reliably delete them.
	// Listing all API keys and match on the Key Prefix to find the key id isn't very reliable.
}

func (cr *clusterApiKeysResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// There is no way to import the API Keys after creation.
}
